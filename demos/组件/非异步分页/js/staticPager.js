(function(ctx){	var pageWrapTemplate='<div class="bag_page">{content}</div>',		itemTemplate = '<a class="pagenum page{pageNum}" href="javascript:void(0);" data-index="{pageNum}">{pageNum}</a>',		itemSelectedTemplate = '<a class="pagenum page{pageNum} currentpage" href="javascript:void(0);" data-index="{pageNum}">{pageNum}</a>',		itemNotShowTemplate = '<a class="pagenum none page{pageNum}" href="javascript:void(0);" data-index="{pageNum}">{pageNum}</a>',		firstPageBtnTemplate = '<a class="guidnum firstPageBtn indexGrey" href="javascript:void(0);">首页</a>',		prevPageBtnTemplate = '<a class="guidnum prevPageBtn prevGrey" href="javascript:void(0);">上一页</a>',		nextPageBtnTemplate = '<a class="guidnum nextPageBtn nextNormal" href="javascript:void(0);">下一页</a>',		nextPageBtnNotAbleTemplate = '<a class="guidnum nextPageBtn nextGrey" href="javascript:void(0);">下一页</a>',		lastPageBtnTemplate = '<a class="guidnum lastPageBtn lastNormal" href="javascript:void(0);">末页</a>',		lastPageBtnNotAbleTemplate = '<a class="guidnum lastPageBtn lastGrey" href="javascript:void(0);">末页</a>',		ellipsisTemplate = '<span class="mr10 ellipsis">...</span>',//省略号		firstPageBtnDisabledClassName = "indexGrey",		firstPageBtnAbledClassName = "indexNormal",		prevPageBtnDisabledClassName = "prevGrey",		prevPageBtnAbledClassName = "prevNormal",		nextPageDisabledClassName = "nextGrey",		nextPageAbledClassName = "nextNormal",		lastPageBtnDisabledClassName = "lastGrey",		lastPageBtnAbledClassName = "lastNormal",		currentItemClassName = "currentpage";	function Page(param){		var defParam = {			initPageNum:1,			pageSize:10,			showItemLength:6,			itemClickFn:function(nowIndex){			}		};		param = fish.lang.extend(defParam,param);		checkParam(param);//检查参数是否有问题，若有问题，则抛错。		this.nowIndex = 1;		this.startIndex = 1;		this.endIndex = param.showItemLength;		this.pageSize = param.pageSize;		this.uOutput = fish.one(param.output);		this.param = param;		this.uOutput.html(makeBackBone(param.pageSize,param.showItemLength));		this.uFirstPageBtn = fish.one(".firstPageBtn",this.uOutput);		this.uPrevPageBtn = fish.one(".prevPageBtn",this.uOutput);		this.uNextPageBtn = fish.one(".nextPageBtn",this.uOutput);		this.uLastPageBtn = fish.one(".lastPageBtn",this.uOutput);		this.uAllItemBtn = fish.all(".pagenum",this.uOutput);		this.uEllipsis = fish.one(".ellipsis",this.uOutput);		this.registerEvent();//内部的事件绑定	};	//内部的事件绑定	Page.prototype.registerEvent = function(){		var param = this.param,			self = this;		//分页的数字框		this.uAllItemBtn.on("click",function(){			var uThis = fish.one(this),				itemPageIndex;			if(!uThis.hasClass(currentItemClassName)){			   itemPageIndex = parseInt(uThis.html(),10);				self.pageTo(itemPageIndex);				param.itemClickFn(self.nowIndex);			}		});		//分页的控制按钮		this.uFirstPageBtn.on("click",function(){			if(!self.uFirstPageBtn.hasClass(firstPageBtnDisabledClassName)){				self.startIndex = 1;				self.endIndex = self.startIndex + param.showItemLength- 1;				self.fixIndex();//处理越界的问题				self.nowIndex = 1;				self.updateView();				param.itemClickFn(self.nowIndex);			}		});		this.uPrevPageBtn.on("click",function(){			//if(!self.uPrevPageBtn.hasClass(prevPageBtnDisabledClassName)){//			if(self.nowIndex > 1){				if(self.nowIndex == self.startIndex){					self.startIndex--;					self.endIndex = self.startIndex + param.showItemLength- 1;					self.fixIndex();//处理越界的问题				}				self.nowIndex--;				self.updateView();				param.itemClickFn(self.nowIndex);			}		});		this.uNextPageBtn.on("click",function(){			if(!self.uNextPageBtn.hasClass(nextPageDisabledClassName)){				if(self.nowIndex == self.endIndex){					self.endIndex++;					self.startIndex = self.endIndex - param.showItemLength+ 1;				}				self.nowIndex++;				self.updateView();				param.itemClickFn(self.nowIndex);			}		});		this.uLastPageBtn.on("click",function(){			if(!self.uLastPageBtn.hasClass(lastPageBtnDisabledClassName)){				self.endIndex = self.pageSize;				self.startIndex = self.endIndex - param.showItemLength+ 1;				self.fixIndex();//处理越界的问题				self.nowIndex = self.pageSize;				self.updateView();				param.itemClickFn(self.nowIndex);			}		});	};	//防止开始和结束的索引越界	Page.prototype.fixIndex = function(){	  if(this.startIndex <=0){		  this.startIndex = 1;		  this.endIndex = this.startIndex + this.param.showItemLength - 1;	  }	  if(this.endIndex > this.param.pageSize){		  this.endIndex = this.param.pageSize;		  this.startIndex = this.endIndex - this.param.showItemLength + 1;	  }	};	//更新按钮的外观	Page.prototype.updateView = function(){		var param = this.param,			self = this;		if(this.endIndex == this.pageSize){			this.uEllipsis.addClass("none");		}else{			this.uEllipsis.removeClass("none");		}		this.uFirstPageBtn.removeClass(firstPageBtnAbledClassName + " " + firstPageBtnDisabledClassName);		this.uPrevPageBtn.removeClass(prevPageBtnAbledClassName + " " + prevPageBtnDisabledClassName);		this.uNextPageBtn.removeClass(nextPageAbledClassName + " " + nextPageDisabledClassName);		this.uLastPageBtn.removeClass(lastPageBtnAbledClassName + " " + lastPageBtnDisabledClassName);		//更新 首页，上一页，下一页，末页的样式		if(this.nowIndex == 1){			this.uFirstPageBtn.addClass(firstPageBtnDisabledClassName);			this.uPrevPageBtn.addClass(prevPageBtnDisabledClassName);			if(this.nowIndex == param.pageSize){//有可能只有一页				this.uNextPageBtn.addClass(nextPageDisabledClassName);				this.uLastPageBtn.addClass(lastPageBtnDisabledClassName);			}else{				this.uNextPageBtn.addClass(nextPageAbledClassName);				this.uLastPageBtn.addClass(lastPageBtnAbledClassName);			}		}else if(this.nowIndex == param.pageSize){//			this.uNextPageBtn.addClass(nextPageDisabledClassName);			this.uLastPageBtn.addClass(lastPageBtnDisabledClassName);			this.uFirstPageBtn.addClass(firstPageBtnAbledClassName);			this.uPrevPageBtn.addClass(prevPageBtnAbledClassName);		}else{			this.uFirstPageBtn.addClass(firstPageBtnAbledClassName);			this.uPrevPageBtn.addClass(prevPageBtnAbledClassName);			this.uNextPageBtn.addClass(nextPageAbledClassName);			this.uLastPageBtn.addClass(lastPageBtnAbledClassName);		}		this.uAllItemBtn.removeClass(currentItemClassName);		this.uAllItemBtn.addClass("none");		fish.one(".page" + self.nowIndex,self.uOutput).addClass(currentItemClassName);		this.uAllItemBtn.each(function(each){			var uThis = fish.one(this),				eachIndex = parseInt(uThis.attr("data-index"),10);			if(self.startIndex <=eachIndex &&  eachIndex<=self.endIndex){				uThis.removeClass("none");			}		});	};	//外部用来加一些事件	Page.prototype.addEventListener = function(type,callBack){		var self = this;		if(type){			if(type === "itemClick"){				self.param.itemClickFn = callBack;			}		}	};	//翻至某页	Page.prototype.pageTo = function(numIndex,isExecuteClickFn){		var param = this.param;		if(numIndex <=  this.startIndex){			 this.startIndex = numIndex - param.showItemLength/2;			 this.endIndex =  this.startIndex + param.showItemLength- 1;			 this.fixIndex();//处理越界的问题		}else if(numIndex >=  this.endIndex){			 this.endIndex = numIndex + param.showItemLength/2;			 this.startIndex =  this.endIndex - param.showItemLength+1;			 this.fixIndex();//处理越界的问题		}		 this.nowIndex = numIndex;		 this.updateView();		 if(isExecuteClickFn){			 param.itemClickFn(this.nowIndex);		 }	};	//只显示前面六个，后面加省略号	function makeBackBone(pageSize,showItemLength){		var isShowEllipsis,			htmlArr = [],			html;		showItemLength = showItemLength || 6;//显示几个分页的单元格		htmlArr.push(firstPageBtnTemplate);		htmlArr.push(prevPageBtnTemplate);		for(var i = 0;i< pageSize;i++){			if(i<showItemLength){				if(i==0){//第一个默认选中					htmlArr.push(itemSelectedTemplate.replace(/{pageNum}/g,i+1));				}else{					htmlArr.push(itemTemplate.replace(/{pageNum}/g,i+1));				}			}else{//剩下的处于隐藏状态，其他				htmlArr.push(itemNotShowTemplate.replace(/{pageNum}/g,i+1));			}		}		isShowEllipsis = pageSize > showItemLength? true:false;		if(isShowEllipsis){			htmlArr.push(ellipsisTemplate);		}		if(pageSize == 1){			htmlArr.push(nextPageBtnNotAbleTemplate);			htmlArr.push(lastPageBtnNotAbleTemplate);		}else{			htmlArr.push(nextPageBtnTemplate);			htmlArr.push(lastPageBtnTemplate);		}		html = pageWrapTemplate.replace("{content}",htmlArr.join(''));		return html;	};	function checkParam(param){		var necessaryKeys = ["output"];		necessaryKeys.forEach(function(each,index){			if(param[each] === undefined){				throw "paramErr:" + param.each + " is needed!";			}		})	};	ctx.StaticPager = Page;	return Page;})(window);